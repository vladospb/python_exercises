import pandas as pd

df = pd.read_csv('vacancies.csv')

# 0. Выведите первые 5 и последние 5 строк датасета. Примените к датасету методы info и describe (1)

print(df) # Prints 5 first and 5 last rows
df.info() # Prints -table: numeration of columns; columns' names; sum of non-null values for such columns (we can see, that column 'salary' has 220 such values of 1527 entries); Numpy types of columns' values
          # -list of types of columns' values
          # -memory usage
print(df.describe())

# Есть ли в датасете пропуски? (1)



# Есть в датасете полные дубли? Если да, удалите их (метод drop_duplicates). (1)

# Сколько уникальных значений у переменной professional_roles? (1)

# Сколько в датасете вакансий, не требующих опыта? (2)

# Какое среднее количество навыков в вакансии? (переменная key_skills) (2)

# Какие валюты (ключ currency в поле salary) используются для заработной платы? Создайте столбец currency. (2)
# Подсказка. Как вариант, можете воспользоваться функцией eval, которая исполняет код, написанный в строке. Для проверки на NaN можете использовать pd.isnull()

# Какая компания лидирует по количеству вакансий? (2)

# Какая компания лидирует по количеству вакансий с указанием заработной платы? (2)

# Создайте столбец salary_num. Рассчитайте его, используя столбец salary. Если в это столбце указана вилка зарплаты,
# используйте среднее значение между from и to. Если указано только одно из значений (from или to, используйте его) (2)

# Какая средняя заработная плата среди вакансий в рублях? А медианная заработная плата? (2)

# Создайте столбец is_python_requirement, который принимает значение 1, если в key_skills присутствует python 
# (учитывайте написание в любом регистре, а также вхождения подстроки python.). Какой процент вакансий требует знания python? (3)

# Сгруппируйте по столбцам experience, schedule, employment, is_python_requirement (сразу по четырем столбцам). Найдите по каждой группе:
# количество опубликованных вакансий
# количество компаний, которые опубликовали вакансии
# среднюю заработную плату среди вакансий с указанием зарплаты в рублях (3)

# Создайте столбец count_skills. В нём должна быть длина списка, который находит в столбце key_skills. Обратите внимание, что изначально столбец key_skills - строка, например, 
# '[]' Подумайте, как превратить её в список и посчитать его длину. (3)

# Создайте столбец len_descr, в котором должна быть длина описания (description) в символах без учета html тегов ("<...>"). Напишите для этого функцию get_len_descr. (3) 
# Можете использовать регулярные выражения. То есть, ваш код может выглядеть, например, так:
# import re
# 
# def get_len_descr(descr):
#   clean_descr = re.sub( # ваш код
#   # ваш код
#   return len_descr
# 
# df['len_descr'] = df['description'].apply(# ваш код)

# Постройте таблицу корреляций с тремя переменными: salary_num, len_descr, count_skills. (1)

# Постройте тепловую карту из таблицы из предыдущего пункта. (1)

# Какие скиллы чаще всего требуются? Выведите топ-10 требуемых скиллов. (3)

# Постройте гистограмму распределения зарплаты среди вакансий в рублях. (3)

# Постройте boxplot зарплаты (среди вакансий в рублях) с группировкой по полю experience (3)

# Попробуйте ответить на какой-нибудь вопрос по данным, не заданный ранее. Никак не ограничиваем вашу фантазию (3)

# Задача 2. 55 баллов
# Работаем с датасетом https://disk.yandex.ru/d/P6u1Za-nnmtwPA Скачайте его.

# Оцениваем факторы, которые влияют на цену на аренду в Москве. Описание столбцов:
# metro - ближайшая станция метро
# price - цена за аренды
# minutes - расстояние до метро в минутах
# way - пусть до метро (пешком или на транспорте)
# views - просмотры квартиры
# provider - кто сдает квартиру (собственник, риелтор, застройщик)
# fee_percent - процент, который получает риелтор
# storey- этаж
# storeys- число этажей в здании
# living_area - жилая площаль
# kitchen_area - площадь кухни
# total_area - общая площадь

# Часть 1. EDA. 30 баллов

# import pandas as pd
# df = pd.read_csv('rent.csv', index_col=0)

# Отобразите первые 5 и последние 5 строк. (1)

# Посчитайте описательные статистики числовых переменных с помощью describe() (1)

# Посчитайте статистики по категориальным переменным. Сколько уникальных значений у переменной metro? (1)

# Есть ли в датасете пропуски? (1)

# Есть ли в датасете полные дубликаты? (2)

# Сколько уникальных значений у переменной provider? Есть ли со значениями этой переменной какие-нибудь проблемы? Если да, то как их исправить? (3)
# Ответ текстом

# Постройте гистограммы распределения всех числовых переменных. Не забудьте подписать график и оси. (2)

# Напишите функцию, которая принимает на вход датасет, названия столбцов, название графика и осей и рисует scatter plot. Нариcуйте с её помощью не менее трёх scatterplot. (4)

# Нарисуйте scatterplot всех пар переменных с помощью sns.pairplot. (1)

# Нарисуйте boxplot переменной price. (2)

# Нарисуйте еще какой-нибудь график, который считайте нужным. (2)

# Какие выводы можно сделать из визуализаций 7-12? (2) Ответ текстом

# Постройте таблицу корреляций и тепловую карту числовых переменных. Между какими переменными наблюдается линейная связь? (3) Ответ текстом

# Часть 2. Построение модели. 30 баллов
# Раздйлите датасет на обучающую и тестовую выборку. Постройте линейную регрессию для переменной price, используя только числовые переменные. 
# Перед этим стандартизируйте все независимые переменные с помощью StandardScaler. (5)

# from sklearn.linear_model import LinearRegression
# from sklearn.metrics import mean_squared_error as MSE,  root_mean_squared_error as RMSE
# from sklearn.model_selection import train_test_split
# from sklearn.preprocessing import StandardScaler

# Сделайте прогноз, посчитайте MSE и RMSE модели на тестовой выборке (5)

# Закодируйте переменные way и provider с помощью OneHotEncoding и добавьте их в модель. Обучите модель еще раз, посчитайте MSE и RMSE (5)

# Удалите из обучающей выборке выбросы по цене (тестовую выборку не трогайте!) Выбросами считайте цены, которые дороже, чем Q3+1.5∗IQR, 
# где IQR - межквартильный размах, Q3 - 75 перцентиль. Обучите модель еще раз, посчитайте MSE и RMSE (5)

# Попробуйте написать свою реализацию функций MSE и RMSE. Функции должна принимать на вход numpy-массив истинных значений и предсказаний и возвращать результат. 
# Примените функции к предсказаниям последней модели. Сравните результат с библиотечной реализацией. (6) Напоминаем, что
# MSE=1n∑ni=1(yi−yi^)2, где yi - истинное значение на i-ом наблюдении, yi^ - предсказание модели на i-ом наблюдении.
# Также рекомендуем ознакомиться с документацией: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.mean_squared_error.html

# def MSE(y_true, y_pred):
#   ваш код

#    return mse

# def RMSE(y_true, y_pred):
#   ваш код

#    return rmse

# Попробуйте улучшить модель, добавив еще какое-нибудь преобразование (например, можете оставить только часть столбцов, добавить новые признаки, закодировать переменную metro и т.п.). Посчитайте метрики. Удалось ли улучшить модель? (4)
# Примечание. Любой разумный технически верно проведенный эксперимент засчитывается, даже если метрику улучшить не удалось.